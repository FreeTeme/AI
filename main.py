import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from ai_handler import query_ai

API_TOKEN = '7752843434:AAEBQX2wx9tC2wO6cIuOr5e2ZtyyaFPdoM4'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    website_button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://vladtichonenko.github.io/safe1/")
    chat_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ò–ò", callback_data="start_chat")
    keyboard.add(website_button, chat_button)

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º "
        "–≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π. üè¶\n\n"
        "–ù–∞—à –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ "
        "–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º. –ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è "
        "–º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏, –ø–æ—ç—Ç–æ–º—É –º—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å "
        "–Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –ø—É—Ç–∏. üìàüí°\n\n"
        "–û—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ –¥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, "
        "–Ω–∞—à –ò–ò –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–≤–µ—Ç—ã, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è, "
        "–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –æ—Ç—Ä–∞—Å–ª–∏. üåü\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É–ª—É—á—à–∞—Ç—å –≤–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±—É–¥—É—â–µ–µ –≤–º–µ—Å—Ç–µ!"
    )

    await message.reply(welcome_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'start_chat')
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ù–∞—á–Ω–µ–º —á–∞—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@dp.message_handler(content_types=['text'])
async def handle_message(message: types.Message):
    user_message = message.text
    progress_message = await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    for i in range(1, 11):
        await asyncio.sleep(2)
        await progress_message.edit_text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... {i * 10}%")

    ai_response = query_ai(user_message)

    if '–û—à–∏–±–∫–∞' in ai_response:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –æ—á–µ–Ω—å —É—Å—Ç–∞–ª, –º–Ω–µ –Ω–∞–¥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üòì")
    else:
        await message.reply(ai_response)

@dp.message_handler(content_types=['document'])
async def handle_file(message: types.Message):
    file_info = await bot.get_file(message.document.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)
    progress_message = await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ñ–∞–π–ª...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    for i in range(1, 11):
        await asyncio.sleep(2)
        await progress_message.edit_text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ñ–∞–π–ª... {i * 10}%")

    ai_response = query_ai('–û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç–æ—Ç —Ñ–∞–π–ª')
    if '–û—à–∏–±–∫–∞' in ai_response:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –æ—á–µ–Ω—å —É—Å—Ç–∞–ª, –º–Ω–µ –Ω–∞–¥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üòì")
    else:
        await message.reply(ai_response)

if __name__ == '__main__':
    from aiogram.utils.executor import start_polling
    start_polling(dp, skip_updates=True)
